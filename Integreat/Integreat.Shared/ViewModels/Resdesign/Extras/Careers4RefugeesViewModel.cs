using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Threading.Tasks;
using Integreat.Shared.Data.Loader;
using Integreat.Shared.Models;
using Integreat.Shared.Models.Extras.Careers4Refugees;
using Integreat.Shared.Services;
using Integreat.Shared.Services.Tracking;
using Integreat.Shared.Utilities;
using Integreat.Shared.ViewModels.Resdesign;
using Integreat.Shared.ViewModels.Resdesign.General;
using localization;
using Xamarin.Forms;

namespace Integreat.Shared {
    public class Careers4RefugeesViewModel : BaseContentViewModel {
        #region Fields
        private readonly INavigator _navigator;

        private ObservableCollection<CareerOffer> _offers;
        private bool _hasNoResults;
        private readonly Func<string, GeneralWebViewPageViewModel> _generalWebViewFactory; // factory generated by AutoFac to resolve a GeneralWebViewPageViewModel instance

        #endregion

        #region Properties
        public ObservableCollection<CareerOffer> Offers {
            get {
                return _offers;
            }
            private set {
                SetProperty(ref _offers, value);
            }
        }

        /// <summary>
        /// Gets or sets a value indicating whether this instance has no results for the given location or not.
        /// </summary>
        public bool HasNoResults {
            get { return _hasNoResults; }
            set { SetProperty(ref _hasNoResults, value); }
        }

        /// <summary>
        /// Gets the label if this instance has no results for the given location.
        /// </summary>
        public string HasNoResultsLabel => AppResources.HasNoResults;

        /// <summary>
        /// The displayed header image on the page
        /// </summary>
        public string HeaderImage { get; set; }

        #endregion

        public Careers4RefugeesViewModel(IAnalyticsService analytics, INavigator navigator, DataLoaderProvider dataLoaderProvider, Func<string, GeneralWebViewPageViewModel> generalWebViewFactory )
            : base(analytics, dataLoaderProvider) {
            Title = "Career4Refugees";
            HeaderImage = "c4r_logo";
            _navigator = navigator;
            _generalWebViewFactory = generalWebViewFactory;
            _navigator.HideToolbar(this);
        }
        protected override async void LoadContent(bool forced = false, Language forLanguage = null, Location forLocation = null) {
            // wait until this resource is free
            Offers?.Clear();
            await Task.Run(() => {
                while (IsBusy) ;
            });
            IsBusy = true;
            HasNoResults = false;
            if (forLocation == null) forLocation = LastLoadedLocation;
            if (forLanguage == null) forLanguage = LastLoadedLanguage;

            var url = forLocation.Careers4RefugeesUrl;
            try {
                var offers =
                    new ObservableCollection<CareerOffer>(
                        await XmlWebParser.ParseXmlFromAddressAsync<List<CareerOffer>>(url, "anzeigen"));

                // hook up the command
                foreach (var careerOffer in offers)
                {
                    careerOffer.OnTapCommand = new Command(OnOfferTapped);
                    careerOffer.OnSelectCommand = new Command(OnSelectionTapped);
                }

                Offers = offers;
            } catch (Exception e) {
                Debug.WriteLine("C4R Error: " + e);
                HasNoResults = true;
            } finally { IsBusy = false; }
        }

        /// <summary>
        /// Called when an [offer is tapped]. (By a command)
        /// </summary>
        /// <param name="careerOfferObject">The career offer object.</param>
        private async void OnOfferTapped(object careerOfferObject)
        {
            // try to cast the object, abort if failed
            var careerOffer = careerOfferObject as CareerOffer;
            if (careerOffer == null) return;
            careerOffer.IsSelected = true;
            var view = _generalWebViewFactory(careerOffer.Link);
            view.Title = "Career4Refugees";
            // push a new general webView page, which will show the URL of the offer
            await _navigator.PushAsync(view, Navigation);
        }

        /// <summary>
        /// Called when an [select button] from an offer is tapped. (By a command)
        /// </summary>
        /// <param name="offerObject">The career offer object.</param>
        private void OnSelectionTapped(object offerObject)
        {
            // try to cast the object, abort if failed
            var careerOffer = offerObject as CareerOffer;
            if (careerOffer == null) return;
            careerOffer.IsSelected = !careerOffer.IsSelected;
            // push a new general webView page, which will show the URL of the offer
        }
    }
}
